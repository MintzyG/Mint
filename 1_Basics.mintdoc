!// Mint Language: Basics and Syntax
!// Version: 0.1.0
!// @since Mint 0.1.1

!// Table of Contents
!// 1. Comments and Documentation
!// 2. Basic Syntax
!// 3. Variables and Constants
!// 4. Operators
!//    - Arithmetic Operators
!//    - Comparison Operators
!//    - Logical Operators
!//    - Bitwise Operators
!//    - Assignment Operators
!//    - Pipe Operators
!//    - Error Propagation Operator
!//    - Conditional (Ternary) Operator

!// 1. Comments and Documentation
// @since Mint 0.1.1
// Comments are made with // for single-line /**/ for multi-line comments.
// !// for single line doc comments and !/**/ for multi line doc comments.

/*
Multi
Line
Comment
*/

!// single line Doc comment
!/*
  Multiline
  Doc comment
*/

!// 2. Basic Syntax
// @since Mint 0.1.1
// Whitespace is non-significant in Mint, and indentation is not required.
// However, the formatter standardizes indentation to 2 spaces.
//
// Statements are terminated by a newline.
// To place multiple statements on the same line, use ; as a separator.
// Example:
int x = 10; float y = 3.14 // Both statements end normally.
// A line with multiple statements still needs to end with a new line, ; are used just to separate statements within it

// Numeric literals
// @since Mint 0.1.2
// Integer and floating point literals can include underscores for readability
int largeNumber = 1_000_000            // Same as 1000000
float pi = 3.141_592_653               // Same as 3.141592653
int binary = 0b1010_1010               // Binary with underscores
int hex = 0xFF_AA_BB                   // Hexadecimal with underscores
float scientific = 6.022_140_76e23     // Scientific notation with underscores

// The underscores are ignored by the compiler and are purely for readability

!// 3. Variables and Constants
// @since Mint 0.1.3
// Variables are immutable by default.
int x
int x, y

// Declaration and assignment
int x = 10
x = 11 // FORBIDDEN - variables are immutable by default

// To declare mutable variables, use mut.
// @since Mint 0.1.3
mut int y = 10
y = 11 // ALLOWED

// All variables must be explicitly typed, with one exception:
z := 10 // Type inference based on assignment using the right side underlying type
w := x  // type of w is now int

// Variables are locally declared unless they are pointers or declared in the top-level scope (outside functions).
// When a scope ends, all variables within it are deleted.

!// Constants
// @since Mint 0.1.4
// Constants are values that cannot be changed after declaration
// They are evaluated at compile time
const PI = 3.14159
const MAX_USERS = 1000
const APP_NAME = "Mint App"

// Constants support all primitive types:
const TIMEOUT_MS = 30_000            // Integer with underscores for readability
const ERROR_THRESHOLD = 0.001        // Float
const DEBUG_MODE = true              // Boolean
const DEFAULT_CHAR = 'A'             // Character
const API_ENDPOINT = "api.mint.dev"  // String

// Constants can be based on other constants or compile-time expressions
const CIRCLE_DIAMETER = 10
const CIRCLE_RADIUS = CIRCLE_DIAMETER / 2
const CIRCLE_AREA = PI * CIRCLE_RADIUS * CIRCLE_RADIUS

// Constants can be declared in any scope, but are typically
// declared at the module level for better accessibility

// Constants support various expressions that can be evaluated at compile time
const DAYS_IN_WEEK = 7
const HOURS_IN_WEEK = DAYS_IN_WEEK * 24
const BINARY_FLAG = 1 << 4           // 16 (bitwise shift)
const HEX_VALUE = 0xFF + 0x10        // 255 + 16 = 271
const IS_POWER_OF_TWO = (16 & (16-1)) == 0  // true (bitwise operations)

// Type annotation for constants is optional but can be useful for clarity
const float GRAVITY = 9.81
const int MAX_RETRIES = 3
const string VERSION = "1.0.0"

// Constants are accessible from the module they are declared in
// The scope visibility rules are the same as for other declarations
const MAX_PUBLIC_SIZE = 1024         // Public constant
const _MAX_PRIVATE_SIZE = 2048       // Private constant (file scope only)
const m_MAX_MODULE_SIZE = 4096       // Module private constant

!// 4. Operators

!// Arithmetic Operators
// @since Mint 0.1.4
// Used for mathematical operations.
+   // Addition
-   // Subtraction
*   // Multiplication
/   // Division
\   // Integer division
%   // Modulus (Remainder)

int sum = 10 + 5     // 15
int product = 4 * 3  // 12

!// Comparison Operators
// @since Mint 0.1.4
// Used to compare values. Returns a boolean result.
==  // Equal to
!=  // Not equal to
>   // Greater than
<   // Less than
>=  // Greater than or equal to
<=  // Less than or equal to

bool isEqual = (10 == 10)  // true
bool isGreater = (5 > 3)   // true

!// Logical Operators
// @since Mint 0.1.4
// Used for boolean logic.
&&  // Logical AND
||  // Logical OR
!   // Logical NOT

bool result = (true && false) // false
bool negation = !true         // false

!// Bitwise Operators
// @since Mint 0.1.5
// Used for bitwise operations.
&   // Bitwise AND
|   // Bitwise OR
~   // Bitwise NOT
<<  // Left shift
>>  // Right shift
^   // Bitwise XOR

int andResult = (5 & 3)   // 1
int shiftLeft = (4 << 1)  // 8

!// Assignment Operators
// @since Mint 0.1.5
// Used for assigning and modifying values.
=   // Simple assignment
+=  // Add and assign
-=  // Subtract and assign
*=  // Multiply and assign
/=  // Divide and assign
\= // Integer divide and assign
%=  // Modulus and assign
&=  // Bitwise AND and assign
|=  // Bitwise OR and assign
~=  // Bitwise NOT and assign
^=  // Bitwise XOR and assign
<<= // Left shift and assign
>>= // Right shift and assign

int x = 10
x += 5  // x is now 15
x &= 3  // x is now 3

// These operators help simplify expressions while keeping the code concise. 

!// Pipe Operators
// @since Mint 0.3.2
// Used for functional composition and method chaining.
|>  // Single pipe operator (passes result as first argument to next function)
||> // Double pipe operator (calls method on result of previous operation)

// The pipe operators enable a more readable, left-to-right function composition style
// This makes code more intuitive and easier to follow, especially for data transformations

// Basic pipe operator usage
string processed = "hello world" 
                |> trim 
                |> uppercase 
                |> reverse
// Equivalent to: reverse(uppercase(trim("hello world")))

// Double pipe operator for method calls
[]int numbers = [1, 2, 3, 4, 5]
               |> sort
               ||> isEmpty()  // Calls isEmpty() method on the sorted array
               
// The double pipe makes method chaining more intuitive:
// Instead of: (numbers |> sort).isEmpty()
// You can use: numbers |> sort ||> isEmpty()
// This would open up to: sort(numbers).isEmpty()

// Pipe with functions that take multiple arguments
int result = 5 |> add(3) |> multiply(2)
// Equivalent to: multiply(add(5, 3), 2)
// The value on the left becomes the first argument

// Double pipe with method parameters
Path files = folder 
           |> getFiles
           ||> filter("*.mint")
           ||> sort("modified_date", "desc")
// Equivalent to: getFiles(folder).filter("*.mint").sort("modified_date", "desc")

// Combining single and double pipes
[]string lines = file
               |> readFile
               ||> getLines()
               |> filter(nonEmpty)
               ||> count()
// Equivalent to: readFile(file).getLines().filter(nonEmpty).count()

// Data processing pipeline
[]int result = [1, 2, 3, 4, 5]
              |> map(square)
              |> filter((int x) -> bool { return x > 10 })
              ||> sort()
              ||> reverse()
// Single pipe (|>) for functions, double pipe (||>) for methods

// Error handling with pipe operators
readFile(path)?
  |> parseJson
  ||> validate()
  ||> transform("user_data")
// Here ? breaks the chain on error, and pipes continue the flow

// Combining with other operators
// The pipe operators can be combined with other operators for expressive code:
getImage(path)
  ||> resize(width > 1000 ? width / 2 : width, height)
  ||> blur(userPreference || DEFAULT_BLUR)
  ||> save(path + ".processed") 

!// Error Propagation Operator
// @since Mint 0.2.1
// The ? operator provides concise error handling
?   // Error propagation operator

// Used after expressions that return a result type or (value, error) tuple
// If the expression contains an error, the function immediately returns that error
// If no error, the success value is unwrapped and execution continues

// Basic usage with result types
Value value = riskyOperation()? // Unwraps result or returns early if error

// When used on a function returning <T, error>:
readConfig(path string) -> <Config, error> {
  []byte data = readFile(path)? // If error, returns error. If ok, unwraps to []byte
  Config config = parseConfig(data)? // Same pattern
  return config // Only reached if no errors occurred
}

// When used on a function returning multiple values with error as last value:
readConfig(path string) -> ([]byte, error) {
  []byte data = readFile(path)? // If error, returns (zero, error). If ok, unwraps to []byte
  processConfig(data)? // Continues only if no error
  return data, nil
}

// Combining with pipe operators for elegant error handling chains
processDocument(path string) -> <Document, error> {
  return readFile(path)?           // Returns early if there's an error
    |> parseMarkdown()?            // Each step can short-circuit on error
    ||> validate()?                // Methods can also use error propagation
    ||> transform()
}

!// Conditional (Ternary) Operator
// @since Mint 0.2.2
// The ? : operator allows for conditional expressions
?:  // Conditional operator (ternary)

// Syntax: condition ? valueIfTrue : valueIfFalse
// Returns one of two values based on a condition

// Basic usage
int max = a > b ? a : b           // Returns the larger of a and b
string status = isActive ? "Running" : "Stopped"  // Text based on condition

// Can be used with any expressions that have compatible types
int result = x > 0 ? x * 2 : -x   // Double positive numbers, negate negative ones
float discount = isMember ? price * 0.1 : price * 0.05 // Different rates based on membership

// Can be used anywhere an expression is expected
print("Status: " + (batteryLevel < 10 ? "Critical" : "Normal"))

// Nested ternary operators (use with caution for readability)
string grade = score >= 90 ? "A" : score >= 80 ? "B" : score >= 70 ? "C" : "F"

// Combining with other operators
void logMessage(string msg, LogLevel level) {
  level >= LogLevel.ERROR ? 
    logToConsole(msg) && sendAlert(msg) : 
    logToFile(msg)
} 